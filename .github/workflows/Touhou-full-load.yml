name: Touhou's mods test

on:
  workflow_dispatch:
    
#concurrency:
#  group: load-build-${{ github.event.pull_request.number || github.ref_name }}
#  cancel-in-progress: true

jobs:
  fetch_release:
    runs-on: ubuntu-latest
    outputs: 
      releases: ${{ steps.fetch.outputs.releases }}
    steps:
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: fetch
        run: |
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/waveyl/dda-mod-ci/releases?per_page=1 > data.json
          matrix=$(
            echo '{ "release" : '
            (jq '[.[]|.tag_name]' data.json | sed 's/[[:space:]]//g')
            echo '}'
              )
          matrix=$(echo $matrix | sed ':a;N;$!ba;s/\n/;/g') 
          matrix1="{ \"release\" : [ \"cdda-experimental-2023-07-23-0530\", \"cdda-experimental-2023-07-22-2222\" ] }"
          echo $matrix1
          echo $matrix
          echo "releases=$matrix" >> $GITHUB_OUTPUT
 # check-matrix:
 #   runs-on: ubuntu-latest
 #   needs: fetch_release
 #   steps:
 #     - name: Check matrix definition
 #       run: |
 #         matrix='${{ needs.fetch_release.outputs.releases }}'
 #         echo $matrix
 #         echo $matrix | jq .
  matrix_test:
    needs: [ fetch_release ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.fetch_release.outputs.releases) }}
    runs-on: ubuntu-latest
    continue-on-error: false
    name: ${{ matrix.release }}
    env:
      ZSTD_CLEVEL: 17
      COMPILER: clang++-12
      TILES: 0
      SOUND: 0
      LOCALIZE: 0
      MODS:
      EXTRA_TEST_OPTS: --error-format=github-action
      PCH: 1
      RELEASE: 1
      ARCHIVE_SUCCESS: basic-build
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: checkout repository
      uses: actions/checkout@v4
      with:
        repository: 'CleverRaven/Cataclysm-DDA'
        ref: ${{ matrix.release }}
    - name: install dependencies (ubuntu)
      run: |
          sudo apt-get update
          sudo apt-get install libncursesw5-dev ccache gettext parallel
          sudo locale-gen en_US.UTF-8 de_DE.UTF-8
    # - name: install SDL2 dependencies (ubuntu)
    #   run: |
    #       sudo apt-get install libsdl2-dev libsdl2-ttf-dev libsdl2-image-dev libsdl2-mixer-dev libpulse-dev libflac-dev
    - name: prepare
      run: bash ./build-scripts/requirements.sh
    - name: get test suite
      run: |
        gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/waveyl/dda-mod-ci/releases/tags/${{matrix.release}} > release.data
        url=$(jq '.assets |.[0] |.browser_download_url' release.data | sed 's/"//g')
        echo $url
        curl -o 'cata_test' -L $url
        # unzip -q 'cata_test.zip'
        mv 'cata_test' 'tests/'
        sudo chmod a+x tests/cata_test
   #     make localization LANGUAGES=all
    - name: mod test suite
      run: |
        # sed -i '58s/parallel/#parallel/g' build-scripts/gha_test_only.sh
        mkdir modci
        cd modci
        git clone https://github.com/waveyl/dda-mod-ci/ --depth=1
        cp dda-mod-ci/pyutils/full_get_mods.py ../build-scripts/
        cp dda-mod-ci/pyutils/full_load_all.sh ../build-scripts/
        cp dda-mod-ci/pyutils/obsolete_mods.py ../build-scripts/
        sudo chmod a+x ../build-scripts/full_get_mods.py
        sudo chmod a+x ../build-scripts/full_load_all.sh
        sudo chmod a+x ../build-scripts/obsolete_mods.py
        cd ..
        ./build-scripts/obsolete_mods.py
        # sed -i '70s/get_all_mods/get_mods/g' build-scripts/gha_test_only.sh
    - name: cnk
      run: |
        git clone https://github.com/linonetwo/CDDA-Kenan-Modpack-Chinese/tree/0.H/ --depth=1
        cd CDDA-Kenan-Modpack-Chinese/
        cp -r Kenan-Structured-Modpack/Cataclysm-DDA-Touhou-Mod ../data/mods/
        cp -r Kenan-Structured-Modpack/Cataclysm-DDA-Touhou-Expansion ../data/mods/
        cp -r Kenan-Structured-Modpack/PM_World ../data/mods/
        rm -rf CDDA-Kenan-Modpack-Chinese/
    - name: run tests
      run: bash ./build-scripts/full_load_all.sh
    # - name: upload results
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: ${{matrix.release}}result.json
    #     path: result.json*
    #     if-no-files-found: ignore
